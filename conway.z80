; This is Conway's Game of Life! It plays thrugh until you press the [ENTER] key. Kinda cool, huh?
; It doesn't write anything onto the screen though. It uses the existing screen contents.

; Remember, you can read pixel states just by using AND. Cool , right? If the Z flag is set after using and, the pixel is off. Use NZ!!

; Screen is 96 x 64
; best thought of as 12 columns and 64 rows for the graph buffer
; (because 12 * 8 is 96, and there are 8 bits in a byte. This is more convenient.)

; Remember, 12 bytes (96 bits) per row, and there are 64 rows.

.nolist
	#include "ti83plus.inc"
.list
#define progStart $9D95
#define len 96
#define wid 64
#define pixCount len * wid
.org progStart - 2
.db t2ByteTok, tAsmCmp

; Steps the program should take:
; 1: For each pixel in PlotSScreen, find out the state of each pixel. Store it in mem.
; 2: For each pixel in mem, store that pixel in the corresponding slot in PlotSScreen.
;
; readStates
; xCheck:
; 	0 - can read all pixels in x axis
;	1 - cannot read left pixels
;	2 - cannot read right pixels
; yCheck:
;	3 - can read all pixels in y axis
;	4 - cannot read upper pixels
;	5 - cannot read lower pixels
; 
;
; calculate bits for readStates.
; set neighborCount to $00, and count each neighbor of the pixel. DO NOT COUNT PIXELS OFF THE SCREEN. that is what readStates is used for.
; update current modulus position of mem and update right portion of screen which won't affect the neighbors of the next pixel. (len + 2)
;
;
;
;
;
;
;
b_call(_RunIndicOff) ; turn off loading bar
mainLoop:
	ld hl, 0
	ld (curPixelLoc), hl ; start at (0, 0)
byteLoop: ; nested loop that calculates the next generation of pixels and stores it into mem.
		ld hl, (curPixelLoc) ; get pixel locaton
		call getPixLoc
		ld bc, PlotSScreen ; add location of screen memory
		add hl, bc
		xor (hl)
		ld (hl), a ; store the evaluated pizel
	ld hl, (curPixelLoc)
	inc hl
	ld (curPixelLoc), hl
	
	; long check to see if hl is equal to the # of pixels on the screen. (have we reached the end?)
	; using strange directives for spasm to get little endian and big endian bytes from 6144 
	
	ld a, (curPixelLoc) ; little endian
	cp pixCount & $FF ; truncate # of pixels to little endian (using a bitwise AND on $ of pixels to convert word to byte)
	jr nz, byteLoop
	ld a, (curPixelLoc + 1) ; big endian 
	cp pixCount >> %1000 & $FF ; rotate # of pixels 8 bits to the right, and truncate the word into a byte
	jr nz, byteLoop

	b_call(_GrBufCpy) ; update screen

	b_call(_GetCSC) ; if [ENTER] key is pressed, stop the program. otherwise, keep on running!
	cp skEnter
	jr nz, mainLoop
	ret ; ends the program

getPixLoc:
	; function that gets the bit and byte location of the given pixel, stored in HL
	; returns bitmask in a and byte location in hl.
	; you have to add PlotSScreen to hl or some other memory you want to edit.
	; DESTROYS B AND CARRY
	
	ld a, %00000111
	and l
	ld b, 3
rotateLoop:
	scf
	ccf ; clear carry to shift hl right 4 bits
	rr h ; division by 8
	rr l
	djnz rotateLoop ; loop 3 times
	
	ld b, a
	ld a, %10000000 ; default bitmask for a. we are using a bitmask to read the right bit.
bitmaskLoop:
	rrca
	djnz bitmaskLoop 

	; now a holds the bitmask for the pixel.

	ret
	


curPixelLoc: .fill 2
readStates: .fill 1
neighborCount: .fill 1


	
mem: ; temporary memory for pixels.
	.fill len + 2